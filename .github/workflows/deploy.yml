name: Deploy Storm server to Docker
# Deploys data based off master branch
on:
  push:
    branches: [main]
    paths:
      - src/**
jobs:
  Dockerizing:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Docker Login
        env:
          DOCKER_USER: "${{ secrets.DOCKER_USER }}"
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD

      - name: Dockerize Storm-Server SHA
        env:
          DH_REPO: "${{ secrets.DH_REPO }}"
          GITHUB_SHA: "${{ github.sha }}"
        run: |
          docker buildx build --tag $DH_REPO:$GITHUB_SHA -f ./prod.dockerfile .

      - name: Docker push Storm server
        env:
          DH_REPO: "${{ secrets.DH_REPO }}"
          GITHUB_SHA: "${{ github.sha }}"
        run: |
          docker push $DH_REPO:$GITHUB_SHA

      - name: Dockerize Storm-Server
        env:
          DH_REPO: "${{ secrets.DH_REPO }}"
        run: |
          docker buildx build --tag $DH_REPO:latest -f ./prod.dockerfile .
      - name: Docker push Storm server
        env:
          DH_REPO: "${{ secrets.DH_REPO }}"
        run: |
          docker push $DH_REPO:latest

  DeploytoLKS:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Update values
        env:
          LINODE_TOKEN: "${{ secrets.LINODE_TOKEN }}"
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
          PULUMI_ROOT: "phantomtech-pulumi"
        run: |
          go mod download
          echo "::add-mask::$LINODE_TOKEN"
          pulumi config set linode:token $LINODE_TOKEN --secret
          cd ../
      - name: 'Deploy'
        uses: 'deliverybot/helm@v1'
        with:
          release: 'storm-server'
          namespace: 'videovault.ai'
          chart: './production/production-helm-chart'
          token: '${{ github.token }}'
          values: |
            name: foobar
          value-files: >-
          [
            "values.yaml",
            "values.production.yaml"
          ]
        env:
          KUBECONFIG_FILE: '${{ secrets.KUBECONFIG }}'
